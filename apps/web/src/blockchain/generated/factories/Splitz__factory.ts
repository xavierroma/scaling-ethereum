/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { Splitz, SplitzInterface } from "../Splitz";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_token",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "description",
        type: "string",
      },
      {
        components: [
          {
            internalType: "address",
            name: "owes",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
        ],
        internalType: "struct Registry.CreateReceiptLine[]",
        name: "lines",
        type: "tuple[]",
      },
    ],
    name: "addReceipt",
    outputs: [
      {
        internalType: "uint56",
        name: "",
        type: "uint56",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint56",
        name: "id",
        type: "uint56",
      },
    ],
    name: "getReceipt",
    outputs: [
      {
        components: [
          {
            internalType: "uint56",
            name: "id",
            type: "uint56",
          },
          {
            internalType: "address",
            name: "owed",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "timestamp",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            components: [
              {
                internalType: "address",
                name: "owes",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
              {
                internalType: "bool",
                name: "paid",
                type: "bool",
              },
            ],
            internalType: "struct Registry.ReceiptLine[]",
            name: "lines",
            type: "tuple[]",
          },
          {
            internalType: "string",
            name: "description",
            type: "string",
          },
        ],
        internalType: "struct Registry.Receipt",
        name: "receipt",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    name: "getReceiptsByAddress",
    outputs: [
      {
        components: [
          {
            internalType: "uint56",
            name: "id",
            type: "uint56",
          },
          {
            internalType: "address",
            name: "owed",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "timestamp",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            components: [
              {
                internalType: "address",
                name: "owes",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
              {
                internalType: "bool",
                name: "paid",
                type: "bool",
              },
            ],
            internalType: "struct Registry.ReceiptLine[]",
            name: "lines",
            type: "tuple[]",
          },
          {
            internalType: "string",
            name: "description",
            type: "string",
          },
        ],
        internalType: "struct Registry.Receipt[]",
        name: "receipts",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "ledger",
    outputs: [
      {
        internalType: "uint56",
        name: "id",
        type: "uint56",
      },
      {
        internalType: "bool",
        name: "paid",
        type: "bool",
      },
      {
        internalType: "address",
        name: "owed",
        type: "address",
      },
      {
        internalType: "address",
        name: "owes",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint56",
        name: "",
        type: "uint56",
      },
    ],
    name: "metadata",
    outputs: [
      {
        internalType: "uint56",
        name: "id",
        type: "uint56",
      },
      {
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "ledgerStartPosition",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "description",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint56",
        name: "receiptId",
        type: "uint56",
      },
      {
        components: [
          {
            internalType: "address",
            name: "owner",
            type: "address",
          },
          {
            internalType: "address",
            name: "spender",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "deadline",
            type: "uint256",
          },
        ],
        internalType: "struct Splitz.Permit",
        name: "permit",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "uint8",
            name: "v",
            type: "uint8",
          },
          {
            internalType: "bytes32",
            name: "r",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "s",
            type: "bytes32",
          },
        ],
        internalType: "struct Splitz.Signature",
        name: "signature",
        type: "tuple",
      },
    ],
    name: "pay",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "token",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "tokenPermit",
    outputs: [
      {
        internalType: "contract IERC20Permit",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040526002805466ffffffffffffff1916905534801561002057600080fd5b5060405161154338038061154383398101604081905261003f91610083565b60028054600160381b600160d81b0319166701000000000000006001600160a01b0393909316928302179055600380546001600160a01b03191690911790556100b3565b60006020828403121561009557600080fd5b81516001600160a01b03811681146100ac57600080fd5b9392505050565b611481806100c26000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063ac1c62141161005b578063ac1c621414610151578063cc937a6714610166578063d068ce8a14610186578063fc0c546a146101b157600080fd5b80630a8b2a001461008d57806310a7fd7b146100bd57806319e2883e1461010e578063788e280514610131575b600080fd5b6100a061009b366004610ed3565b6101cb565b60405166ffffffffffffff90911681526020015b60405180910390f35b6100d06100cb366004610f90565b61046f565b6040805166ffffffffffffff909616865293151560208601526001600160a01b0392831693850193909352166060830152608082015260a0016100b4565b61012161011c366004610fc5565b6104cb565b6040516100b4949392919061102d565b61014461013f366004611065565b610588565b6040516100b4919061114b565b61016461015f3660046111ad565b6107ce565b005b610179610174366004610fc5565b6109dd565b6040516100b49190611236565b600354610199906001600160a01b031681565b6040516001600160a01b0390911681526020016100b4565b60025461019990600160381b90046001600160a01b031681565b6000816102135760405162461bcd60e51b8152602060048201526011602482015270139bc81b1a5b995cc81c1c9bdd9a591959607a1b60448201526064015b60405180910390fd5b60008451116102645760405162461bcd60e51b815260206004820152601760248201527f4e6f206465736372697074696f6e2070726f7669646564000000000000000000604482015260640161020a565b60015460005b838110156103ac576040805160a08101825260025466ffffffffffffff168152600060208201523391810191909152600190606081018787858181106102b2576102b2611249565b6102c89260206040909202019081019150611065565b6001600160a01b031681526020018787858181106102e8576102e8611249565b6040908102929092016020908101359093525083546001808201865560009586529483902084516003909202018054938501519285015166ffffffffffffff90921667ffffffffffffffff1990941693909317600160381b921515929092029190911768010000000000000000600160e01b031916600160401b6001600160a01b0392831602178255606083015193820180546001600160a01b031916949091169390931790925560800151600290910155806103a481611275565b91505061026a565b50604080516080810182526002805466ffffffffffffff908116808452426020808601918252858701888152606087018d8152600094855291849052969092208551815466ffffffffffffff19169416939093178355516001830155935191810191909155915190919060038201906104259082611317565b50506002805466ffffffffffffff1691506000610441836113d7565b91906101000a81548166ffffffffffffff021916908366ffffffffffffff1602179055509150509392505050565b6001818154811061047f57600080fd5b600091825260209091206003909102018054600182015460029092015466ffffffffffffff8216935060ff600160381b830416926001600160a01b03600160401b909304831692169085565b600060208190529081526040902080546001820154600283015460038401805466ffffffffffffff9094169492939192916105059061128e565b80601f01602080910402602001604051908101604052809291908181526020018280546105319061128e565b801561057e5780601f106105535761010080835404028352916020019161057e565b820191906000526020600020905b81548152906001019060200180831161056157829003601f168201915b5050505050905084565b60606000805b60025466ffffffffffffff168110156106615760006105ac826109dd565b9050846001600160a01b031681602001516001600160a01b0316036105de57826105d581611275565b9350505061064f565b60005b81608001515181101561064c57856001600160a01b03168260800151828151811061060e5761060e611249565b6020026020010151600001516001600160a01b03160361063a578361063281611275565b94505061064c565b8061064481611275565b9150506105e1565b50505b8061065981611275565b91505061058e565b508067ffffffffffffffff81111561067b5761067b610e17565b6040519080825280602002602001820160405280156106b457816020015b6106a1610dcf565b8152602001906001900390816106995790505b5091506000805b60025466ffffffffffffff168110156107c65760006106d9826109dd565b9050856001600160a01b031681602001516001600160a01b0316036107275780858461070481611275565b95508151811061071657610716611249565b6020026020010181905250506107b4565b60005b8160800151518110156107b157866001600160a01b03168260800151828151811061075757610757611249565b6020026020010151600001516001600160a01b03160361079f5781868561077d81611275565b96508151811061078f5761078f611249565b60200260200101819052506107b1565b806107a981611275565b91505061072a565b50505b806107be81611275565b9150506106bb565b505050919050565b60006107d9846109dd565b6020810151909150600090815b8360800151518110156108675760008460800151828151811061080b5761080b611249565b60200260200101519050336001600160a01b031681600001516001600160a01b0316146108385750610855565b602081015161084790856113fd565b600160409092019190915292505b8061085f81611275565b9150506107e6565b50600082116108b85760405162461bcd60e51b815260206004820152601860248201527f53706c69747a3a206e6f20616d6f756e7420746f207061790000000000000000604482015260640161020a565b60035484516020860151604080880151905163d505accf60e01b81523360048201523060248201526044810187905260808a0135606482015260ff909316608484015260a483019190915260c48201526001600160a01b039091169063d505accf9060e401600060405180830381600087803b15801561093757600080fd5b505af115801561094b573d6000803e3d6000fd5b50506002546040516323b872dd60e01b81523360048201526001600160a01b03858116602483015260448201879052600160381b90920490911692506323b872dd91506064016020604051808303816000875af11580156109b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d49190611416565b50505050505050565b6109e5610dcf565b60025466ffffffffffffff90811690831610610a355760405162461bcd60e51b815260206004820152600f60248201526e1a59081a5cc81b9bdd081d985b1a59608a1b604482015260640161020a565b66ffffffffffffff808316600090815260208181526040808320815160808101835281549095168552600181015492850192909252600282015490840152600381018054929392606084019190610a8b9061128e565b80601f0160208091040260200160405190810160405280929190818152602001828054610ab79061128e565b8015610b045780601f10610ad957610100808354040283529160200191610b04565b820191906000526020600020905b815481529060010190602001808311610ae757829003601f168201915b5050505050815250509050600080826040015190505b600154811015610b80578466ffffffffffffff1660018281548110610b4157610b41611249565b600091825260209091206003909102015466ffffffffffffff1603610b6e5781610b6a81611275565b9250505b80610b7881611275565b915050610b1a565b506040518060c00160405280836000015166ffffffffffffff1681526020016001846040015181548110610bb657610bb6611249565b600091825260208083206003909202909101546001600160a01b03600160401b909104168352858101519083015260408201526060018267ffffffffffffffff811115610c0557610c05610e17565b604051908082528060200260200182016040528015610c5057816020015b6040805160608101825260008082526020808301829052928201528252600019909201910181610c235790505b508152606084015160209091015260408301519093505b6001548110156107c6578466ffffffffffffff1660018281548110610c8e57610c8e611249565b600091825260209091206003909102015466ffffffffffffff16036107c6576000836040015182610cbf9190611438565b9050604051806060016040528060018481548110610cdf57610cdf611249565b600091825260209182902060016003909202018101546001600160a01b031683528054929091019185908110610d1757610d17611249565b906000526020600020906003020160020154815260200160018481548110610d4157610d41611249565b6000918252602090912060039091020154600160381b900460ff16151590526080860151805183908110610d7757610d77611249565b602002602001018190525060018281548110610d9557610d95611249565b90600052602060002090600302016002015485606001818151610db891906113fd565b905250819050610dc781611275565b915050610c67565b6040518060c00160405280600066ffffffffffffff16815260200160006001600160a01b03168152602001600081526020016000815260200160608152602001606081525090565b634e487b7160e01b600052604160045260246000fd5b6040516060810167ffffffffffffffff81118282101715610e5057610e50610e17565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715610e7f57610e7f610e17565b604052919050565b60008083601f840112610e9957600080fd5b50813567ffffffffffffffff811115610eb157600080fd5b6020830191508360208260061b8501011115610ecc57600080fd5b9250929050565b600080600060408486031215610ee857600080fd5b833567ffffffffffffffff80821115610f0057600080fd5b818601915086601f830112610f1457600080fd5b8135602082821115610f2857610f28610e17565b610f3a601f8301601f19168201610e56565b8281528982848701011115610f4e57600080fd5b82828601838301376000928101820192909252909550860135915080821115610f7657600080fd5b50610f8386828701610e87565b9497909650939450505050565b600060208284031215610fa257600080fd5b5035919050565b803566ffffffffffffff81168114610fc057600080fd5b919050565b600060208284031215610fd757600080fd5b610fe082610fa9565b9392505050565b6000815180845260005b8181101561100d57602081850181015186830182015201610ff1565b506000602082860101526020601f19601f83011685010191505092915050565b66ffffffffffffff8516815283602082015282604082015260806060820152600061105b6080830184610fe7565b9695505050505050565b60006020828403121561107757600080fd5b81356001600160a01b0381168114610fe057600080fd5b805166ffffffffffffff1682526020808201516001600160a01b0390811682850152604080840151818601526060808501518187015260808086015160c09188018290528051918801829052600095908101949093929091869060e08a01905b8083101561112357875180518616835287810151888401528601511515868301529686019660019290920191908301906110ee565b5060a0890151965089810360a08b015261113d8188610fe7565b9a9950505050505050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156111a057603f1988860301845261118e85835161108e565b94509285019290850190600101611172565b5092979650505050505050565b60008060008385036101208112156111c457600080fd5b6111cd85610fa9565b935060a0601f19820112156111e157600080fd5b602085019250606060bf19820112156111f957600080fd5b50611202610e2d565b60c085013560ff8116811461121657600080fd5b815260e08501356020820152610100909401356040850152509093909250565b602081526000610fe0602083018461108e565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016112875761128761125f565b5060010190565b600181811c908216806112a257607f821691505b6020821081036112c257634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561131257600081815260208120601f850160051c810160208610156112ef5750805b601f850160051c820191505b8181101561130e578281556001016112fb565b5050505b505050565b815167ffffffffffffffff81111561133157611331610e17565b6113458161133f845461128e565b846112c8565b602080601f83116001811461137a57600084156113625750858301515b600019600386901b1c1916600185901b17855561130e565b600085815260208120601f198616915b828110156113a95788860151825594840194600190910190840161138a565b50858210156113c75787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600066ffffffffffffff8083168181036113f3576113f361125f565b6001019392505050565b808201808211156114105761141061125f565b92915050565b60006020828403121561142857600080fd5b81518015158114610fe057600080fd5b818103818111156114105761141061125f56fea26469706673582212207fc80d91187e44f24e3b27ea72f35af7beab7521cb4afcafdfe946720a04eaa064736f6c63430008130033";

type SplitzConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SplitzConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Splitz__factory extends ContractFactory {
  constructor(...args: SplitzConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Splitz> {
    return super.deploy(_token, overrides || {}) as Promise<Splitz>;
  }
  override getDeployTransaction(
    _token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_token, overrides || {});
  }
  override attach(address: string): Splitz {
    return super.attach(address) as Splitz;
  }
  override connect(signer: Signer): Splitz__factory {
    return super.connect(signer) as Splitz__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SplitzInterface {
    return new utils.Interface(_abi) as SplitzInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Splitz {
    return new Contract(address, _abi, signerOrProvider) as Splitz;
  }
}
