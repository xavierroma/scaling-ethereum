/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { Splitz, SplitzInterface } from "../Splitz";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_token",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "description",
        type: "string",
      },
      {
        components: [
          {
            internalType: "address",
            name: "owes",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
        ],
        internalType: "struct Registry.CreateReceiptLine[]",
        name: "lines",
        type: "tuple[]",
      },
    ],
    name: "addReceipt",
    outputs: [
      {
        internalType: "uint56",
        name: "",
        type: "uint56",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint56",
        name: "id",
        type: "uint56",
      },
    ],
    name: "getReceipt",
    outputs: [
      {
        components: [
          {
            internalType: "uint56",
            name: "id",
            type: "uint56",
          },
          {
            internalType: "address",
            name: "owed",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "timestamp",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            components: [
              {
                internalType: "address",
                name: "owes",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
              {
                internalType: "bool",
                name: "paid",
                type: "bool",
              },
            ],
            internalType: "struct Registry.ReceiptLine[]",
            name: "lines",
            type: "tuple[]",
          },
          {
            internalType: "string",
            name: "description",
            type: "string",
          },
        ],
        internalType: "struct Registry.Receipt",
        name: "receipt",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    name: "getReceiptsByAddress",
    outputs: [
      {
        components: [
          {
            internalType: "uint56",
            name: "id",
            type: "uint56",
          },
          {
            internalType: "address",
            name: "owed",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "timestamp",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            components: [
              {
                internalType: "address",
                name: "owes",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
              {
                internalType: "bool",
                name: "paid",
                type: "bool",
              },
            ],
            internalType: "struct Registry.ReceiptLine[]",
            name: "lines",
            type: "tuple[]",
          },
          {
            internalType: "string",
            name: "description",
            type: "string",
          },
        ],
        internalType: "struct Registry.Receipt[]",
        name: "receipts",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "ledger",
    outputs: [
      {
        internalType: "uint56",
        name: "id",
        type: "uint56",
      },
      {
        internalType: "bool",
        name: "paid",
        type: "bool",
      },
      {
        internalType: "address",
        name: "owed",
        type: "address",
      },
      {
        internalType: "address",
        name: "owes",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint56",
        name: "",
        type: "uint56",
      },
    ],
    name: "metadata",
    outputs: [
      {
        internalType: "uint56",
        name: "id",
        type: "uint56",
      },
      {
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "ledgerStartPosition",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "description",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint56",
        name: "receiptId",
        type: "uint56",
      },
      {
        components: [
          {
            internalType: "address",
            name: "owner",
            type: "address",
          },
          {
            internalType: "address",
            name: "spender",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "deadline",
            type: "uint256",
          },
        ],
        internalType: "struct Splitz.Permit",
        name: "permit",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "uint8",
            name: "v",
            type: "uint8",
          },
          {
            internalType: "bytes32",
            name: "r",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "s",
            type: "bytes32",
          },
        ],
        internalType: "struct Splitz.Signature",
        name: "signature",
        type: "tuple",
      },
    ],
    name: "payReceipt",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "token",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "tokenPermit",
    outputs: [
      {
        internalType: "contract IERC20Permit",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040526002805466ffffffffffffff1916905534801561002057600080fd5b5060405161175038038061175083398101604081905261003f91610083565b60028054600160381b600160d81b0319166701000000000000006001600160a01b0393909316928302179055600380546001600160a01b03191690911790556100b3565b60006020828403121561009557600080fd5b81516001600160a01b03811681146100ac57600080fd5b9392505050565b61168e806100c26000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063788e28051161005b578063788e280514610146578063cc937a6714610166578063d068ce8a14610186578063fc0c546a146101b157600080fd5b80630a8b2a001461008d57806310a7fd7b146100bd57806319e2883e1461010e5780634534d95b14610131575b600080fd5b6100a061009b3660046110e4565b6101cb565b60405166ffffffffffffff90911681526020015b60405180910390f35b6100d06100cb3660046111a1565b61049f565b6040805166ffffffffffffff909616865293151560208601526001600160a01b0392831693850193909352166060830152608082015260a0016100b4565b61012161011c3660046111d6565b6104fb565b6040516100b4949392919061123e565b61014461013f366004611276565b6105b8565b005b6101596101543660046112ff565b61073c565b6040516100b491906113e5565b6101796101743660046111d6565b610982565b6040516100b49190611447565b600354610199906001600160a01b031681565b6040516001600160a01b0390911681526020016100b4565b60025461019990600160381b90046001600160a01b031681565b6000816102135760405162461bcd60e51b8152602060048201526011602482015270139bc81b1a5b995cc81c1c9bdd9a591959607a1b60448201526064015b60405180910390fd5b60008451116102645760405162461bcd60e51b815260206004820152601760248201527f4e6f206465736372697074696f6e2070726f7669646564000000000000000000604482015260640161020a565b60015460005b838110156103dc576040805160a0810190915260025466ffffffffffffff16815260019060208101338888868181106102a5576102a561145a565b6102bb92602060409092020190810191506112ff565b6001600160a01b03161481523360208201526040018787858181106102e2576102e261145a565b6102f892602060409092020190810191506112ff565b6001600160a01b031681526020018787858181106103185761031861145a565b6040908102929092016020908101359093525083546001808201865560009586529483902084516003909202018054938501519285015166ffffffffffffff90921667ffffffffffffffff1990941693909317600160381b921515929092029190911768010000000000000000600160e01b031916600160401b6001600160a01b0392831602178255606083015193820180546001600160a01b031916949091169390931790925560800151600290910155806103d481611486565b91505061026a565b50604080516080810182526002805466ffffffffffffff908116808452426020808601918252858701888152606087018d8152600094855291849052969092208551815466ffffffffffffff19169416939093178355516001830155935191810191909155915190919060038201906104559082611524565b50506002805466ffffffffffffff1691506000610471836115e4565b91906101000a81548166ffffffffffffff021916908366ffffffffffffff1602179055509150509392505050565b600181815481106104af57600080fd5b600091825260209091206003909102018054600182015460029092015466ffffffffffffff8216935060ff600160381b830416926001600160a01b03600160401b909304831692169085565b600060208190529081526040902080546001820154600283015460038401805466ffffffffffffff9094169492939192916105359061149f565b80601f01602080910402602001604051908101604052809291908181526020018280546105619061149f565b80156105ae5780601f10610583576101008083540402835291602001916105ae565b820191906000526020600020905b81548152906001019060200180831161059157829003601f168201915b5050505050905084565b6000806105c485610d74565b91509150600082116106185760405162461bcd60e51b815260206004820152601860248201527f53706c69747a3a206e6f20616d6f756e7420746f207061790000000000000000604482015260640161020a565b60035483516020850151604080870151905163d505accf60e01b8152336004820152306024820152604481018790526080890135606482015260ff909316608484015260a483019190915260c48201526001600160a01b039091169063d505accf9060e401600060405180830381600087803b15801561069757600080fd5b505af11580156106ab573d6000803e3d6000fd5b50506002546040516323b872dd60e01b81523360048201526001600160a01b03858116602483015260448201879052600160381b90920490911692506323b872dd91506064016020604051808303816000875af1158015610710573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610734919061160a565b505050505050565b60606000805b60025466ffffffffffffff1681101561081557600061076082610982565b9050846001600160a01b031681602001516001600160a01b031603610792578261078981611486565b93505050610803565b60005b81608001515181101561080057856001600160a01b0316826080015182815181106107c2576107c261145a565b6020026020010151600001516001600160a01b0316036107ee57836107e681611486565b945050610800565b806107f881611486565b915050610795565b50505b8061080d81611486565b915050610742565b508067ffffffffffffffff81111561082f5761082f611028565b60405190808252806020026020018201604052801561086857816020015b610855610fe0565b81526020019060019003908161084d5790505b5091506000805b60025466ffffffffffffff1681101561097a57600061088d82610982565b9050856001600160a01b031681602001516001600160a01b0316036108db578085846108b881611486565b9550815181106108ca576108ca61145a565b602002602001018190525050610968565b60005b81608001515181101561096557866001600160a01b03168260800151828151811061090b5761090b61145a565b6020026020010151600001516001600160a01b0316036109535781868561093181611486565b9650815181106109435761094361145a565b6020026020010181905250610965565b8061095d81611486565b9150506108de565b50505b8061097281611486565b91505061086f565b505050919050565b61098a610fe0565b60025466ffffffffffffff908116908316106109da5760405162461bcd60e51b815260206004820152600f60248201526e1a59081a5cc81b9bdd081d985b1a59608a1b604482015260640161020a565b66ffffffffffffff808316600090815260208181526040808320815160808101835281549095168552600181015492850192909252600282015490840152600381018054929392606084019190610a309061149f565b80601f0160208091040260200160405190810160405280929190818152602001828054610a5c9061149f565b8015610aa95780601f10610a7e57610100808354040283529160200191610aa9565b820191906000526020600020905b815481529060010190602001808311610a8c57829003601f168201915b5050505050815250509050600080826040015190505b600154811015610b25578466ffffffffffffff1660018281548110610ae657610ae661145a565b600091825260209091206003909102015466ffffffffffffff1603610b135781610b0f81611486565b9250505b80610b1d81611486565b915050610abf565b506040518060c00160405280836000015166ffffffffffffff1681526020016001846040015181548110610b5b57610b5b61145a565b600091825260208083206003909202909101546001600160a01b03600160401b909104168352858101519083015260408201526060018267ffffffffffffffff811115610baa57610baa611028565b604051908082528060200260200182016040528015610bf557816020015b6040805160608101825260008082526020808301829052928201528252600019909201910181610bc85790505b508152606084015160209091015260408301519093505b60015481101561097a578466ffffffffffffff1660018281548110610c3357610c3361145a565b600091825260209091206003909102015466ffffffffffffff160361097a576000836040015182610c64919061162c565b9050604051806060016040528060018481548110610c8457610c8461145a565b600091825260209182902060016003909202018101546001600160a01b031683528054929091019185908110610cbc57610cbc61145a565b906000526020600020906003020160020154815260200160018481548110610ce657610ce661145a565b6000918252602090912060039091020154600160381b900460ff16151590526080860151805183908110610d1c57610d1c61145a565b602002602001018190525060018281548110610d3a57610d3a61145a565b90600052602060002090600302016002015485606001818151610d5d9190611645565b905250819050610d6c81611486565b915050610c0c565b66ffffffffffffff80821660009081526020818152604080832081516080810183528154909516855260018101549285019290925260028201549084015260038101805492938493849391926060840191610dce9061149f565b80601f0160208091040260200160405190810160405280929190818152602001828054610dfa9061149f565b8015610e475780601f10610e1c57610100808354040283529160200191610e47565b820191906000526020600020905b815481529060010190602001808311610e2a57829003601f168201915b5050505050815250509050600092506001816040015181548110610e6d57610e6d61145a565b60009182526020909120600390910201546040820151600160401b9091046001600160a01b031692505b600154811015610fd9578466ffffffffffffff1660018281548110610ebe57610ebe61145a565b600091825260209091206003909102015466ffffffffffffff1603610fd957336001600160a01b031660018281548110610efa57610efa61145a565b60009182526020909120600160039092020101546001600160a01b0316141580610f4e575060018181548110610f3257610f3261145a565b6000918252602090912060039091020154600160381b900460ff165b610fc75760018181548110610f6557610f6561145a565b90600052602060002090600302016002015484610f829190611645565b93506001808281548110610f9857610f9861145a565b600091825260209091206003909102018054911515600160381b0267ff00000000000000199092169190911790555b80610fd181611486565b915050610e97565b5050915091565b6040518060c00160405280600066ffffffffffffff16815260200160006001600160a01b03168152602001600081526020016000815260200160608152602001606081525090565b634e487b7160e01b600052604160045260246000fd5b6040516060810167ffffffffffffffff8111828210171561106157611061611028565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171561109057611090611028565b604052919050565b60008083601f8401126110aa57600080fd5b50813567ffffffffffffffff8111156110c257600080fd5b6020830191508360208260061b85010111156110dd57600080fd5b9250929050565b6000806000604084860312156110f957600080fd5b833567ffffffffffffffff8082111561111157600080fd5b818601915086601f83011261112557600080fd5b813560208282111561113957611139611028565b61114b601f8301601f19168201611067565b828152898284870101111561115f57600080fd5b8282860183830137600092810182019290925290955086013591508082111561118757600080fd5b5061119486828701611098565b9497909650939450505050565b6000602082840312156111b357600080fd5b5035919050565b803566ffffffffffffff811681146111d157600080fd5b919050565b6000602082840312156111e857600080fd5b6111f1826111ba565b9392505050565b6000815180845260005b8181101561121e57602081850181015186830182015201611202565b506000602082860101526020601f19601f83011685010191505092915050565b66ffffffffffffff8516815283602082015282604082015260806060820152600061126c60808301846111f8565b9695505050505050565b600080600083850361012081121561128d57600080fd5b611296856111ba565b935060a0601f19820112156112aa57600080fd5b602085019250606060bf19820112156112c257600080fd5b506112cb61103e565b60c085013560ff811681146112df57600080fd5b815260e08501356020820152610100909401356040850152509093909250565b60006020828403121561131157600080fd5b81356001600160a01b03811681146111f157600080fd5b805166ffffffffffffff1682526020808201516001600160a01b0390811682850152604080840151818601526060808501518187015260808086015160c09188018290528051918801829052600095908101949093929091869060e08a01905b808310156113bd5787518051861683528781015188840152860151151586830152968601966001929092019190830190611388565b5060a0890151965089810360a08b01526113d781886111f8565b9a9950505050505050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561143a57603f19888603018452611428858351611328565b9450928501929085019060010161140c565b5092979650505050505050565b6020815260006111f16020830184611328565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001820161149857611498611470565b5060010190565b600181811c908216806114b357607f821691505b6020821081036114d357634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561151f57600081815260208120601f850160051c810160208610156115005750805b601f850160051c820191505b818110156107345782815560010161150c565b505050565b815167ffffffffffffffff81111561153e5761153e611028565b6115528161154c845461149f565b846114d9565b602080601f831160018114611587576000841561156f5750858301515b600019600386901b1c1916600185901b178555610734565b600085815260208120601f198616915b828110156115b657888601518255948401946001909101908401611597565b50858210156115d45787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600066ffffffffffffff80831681810361160057611600611470565b6001019392505050565b60006020828403121561161c57600080fd5b815180151581146111f157600080fd5b8181038181111561163f5761163f611470565b92915050565b8082018082111561163f5761163f61147056fea2646970667358221220d2f64fba3b0c46b1c9b9242eba65698dda6ccef63742efdb488f2494df323e3964736f6c63430008130033";

type SplitzConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SplitzConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Splitz__factory extends ContractFactory {
  constructor(...args: SplitzConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Splitz> {
    return super.deploy(_token, overrides || {}) as Promise<Splitz>;
  }
  override getDeployTransaction(
    _token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_token, overrides || {});
  }
  override attach(address: string): Splitz {
    return super.attach(address) as Splitz;
  }
  override connect(signer: Signer): Splitz__factory {
    return super.connect(signer) as Splitz__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SplitzInterface {
    return new utils.Interface(_abi) as SplitzInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Splitz {
    return new Contract(address, _abi, signerOrProvider) as Splitz;
  }
}
