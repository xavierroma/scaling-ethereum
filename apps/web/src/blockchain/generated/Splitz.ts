/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace Registry {
  export type CreateReceiptLineStruct = {
    owes: PromiseOrValue<string>;
    amount: PromiseOrValue<BigNumberish>;
  };

  export type CreateReceiptLineStructOutput = [string, BigNumber] & {
    owes: string;
    amount: BigNumber;
  };

  export type ReceiptLineStruct = {
    owes: PromiseOrValue<string>;
    amount: PromiseOrValue<BigNumberish>;
    paid: PromiseOrValue<boolean>;
  };

  export type ReceiptLineStructOutput = [string, BigNumber, boolean] & {
    owes: string;
    amount: BigNumber;
    paid: boolean;
  };

  export type ReceiptStruct = {
    id: PromiseOrValue<BigNumberish>;
    owed: PromiseOrValue<string>;
    timestamp: PromiseOrValue<BigNumberish>;
    amount: PromiseOrValue<BigNumberish>;
    lines: Registry.ReceiptLineStruct[];
    description: PromiseOrValue<string>;
  };

  export type ReceiptStructOutput = [
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    Registry.ReceiptLineStructOutput[],
    string
  ] & {
    id: BigNumber;
    owed: string;
    timestamp: BigNumber;
    amount: BigNumber;
    lines: Registry.ReceiptLineStructOutput[];
    description: string;
  };
}

export declare namespace Splitz {
  export type PermitStruct = {
    owner: PromiseOrValue<string>;
    spender: PromiseOrValue<string>;
    value: PromiseOrValue<BigNumberish>;
    nonce: PromiseOrValue<BigNumberish>;
    deadline: PromiseOrValue<BigNumberish>;
  };

  export type PermitStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    owner: string;
    spender: string;
    value: BigNumber;
    nonce: BigNumber;
    deadline: BigNumber;
  };

  export type SignatureStruct = {
    v: PromiseOrValue<BigNumberish>;
    r: PromiseOrValue<BytesLike>;
    s: PromiseOrValue<BytesLike>;
  };

  export type SignatureStructOutput = [number, string, string] & {
    v: number;
    r: string;
    s: string;
  };
}

export interface SplitzInterface extends utils.Interface {
  functions: {
    "addReceipt(string,(address,uint256)[])": FunctionFragment;
    "getReceipt(uint56)": FunctionFragment;
    "getReceiptsByAddress(address)": FunctionFragment;
    "ledger(uint256)": FunctionFragment;
    "metadata(uint56)": FunctionFragment;
    "pay(uint56,(address,address,uint256,uint256,uint256),(uint8,bytes32,bytes32))": FunctionFragment;
    "token()": FunctionFragment;
    "tokenPermit()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addReceipt"
      | "getReceipt"
      | "getReceiptsByAddress"
      | "ledger"
      | "metadata"
      | "pay"
      | "token"
      | "tokenPermit"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addReceipt",
    values: [PromiseOrValue<string>, Registry.CreateReceiptLineStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getReceipt",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getReceiptsByAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "ledger",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "metadata",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "pay",
    values: [
      PromiseOrValue<BigNumberish>,
      Splitz.PermitStruct,
      Splitz.SignatureStruct
    ]
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenPermit",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "addReceipt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getReceipt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getReceiptsByAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ledger", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "metadata", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pay", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenPermit",
    data: BytesLike
  ): Result;

  events: {};
}

export interface Splitz extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SplitzInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addReceipt(
      description: PromiseOrValue<string>,
      lines: Registry.CreateReceiptLineStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getReceipt(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [Registry.ReceiptStructOutput] & { receipt: Registry.ReceiptStructOutput }
    >;

    getReceiptsByAddress(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [Registry.ReceiptStructOutput[]] & {
        receipts: Registry.ReceiptStructOutput[];
      }
    >;

    ledger(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean, string, string, BigNumber] & {
        id: BigNumber;
        paid: boolean;
        owed: string;
        owes: string;
        amount: BigNumber;
      }
    >;

    metadata(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, string] & {
        id: BigNumber;
        timestamp: BigNumber;
        ledgerStartPosition: BigNumber;
        description: string;
      }
    >;

    pay(
      receiptId: PromiseOrValue<BigNumberish>,
      permit: Splitz.PermitStruct,
      signature: Splitz.SignatureStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    token(overrides?: CallOverrides): Promise<[string]>;

    tokenPermit(overrides?: CallOverrides): Promise<[string]>;
  };

  addReceipt(
    description: PromiseOrValue<string>,
    lines: Registry.CreateReceiptLineStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getReceipt(
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<Registry.ReceiptStructOutput>;

  getReceiptsByAddress(
    addr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<Registry.ReceiptStructOutput[]>;

  ledger(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, boolean, string, string, BigNumber] & {
      id: BigNumber;
      paid: boolean;
      owed: string;
      owes: string;
      amount: BigNumber;
    }
  >;

  metadata(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, string] & {
      id: BigNumber;
      timestamp: BigNumber;
      ledgerStartPosition: BigNumber;
      description: string;
    }
  >;

  pay(
    receiptId: PromiseOrValue<BigNumberish>,
    permit: Splitz.PermitStruct,
    signature: Splitz.SignatureStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  token(overrides?: CallOverrides): Promise<string>;

  tokenPermit(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    addReceipt(
      description: PromiseOrValue<string>,
      lines: Registry.CreateReceiptLineStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReceipt(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<Registry.ReceiptStructOutput>;

    getReceiptsByAddress(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<Registry.ReceiptStructOutput[]>;

    ledger(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean, string, string, BigNumber] & {
        id: BigNumber;
        paid: boolean;
        owed: string;
        owes: string;
        amount: BigNumber;
      }
    >;

    metadata(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, string] & {
        id: BigNumber;
        timestamp: BigNumber;
        ledgerStartPosition: BigNumber;
        description: string;
      }
    >;

    pay(
      receiptId: PromiseOrValue<BigNumberish>,
      permit: Splitz.PermitStruct,
      signature: Splitz.SignatureStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    token(overrides?: CallOverrides): Promise<string>;

    tokenPermit(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    addReceipt(
      description: PromiseOrValue<string>,
      lines: Registry.CreateReceiptLineStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getReceipt(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReceiptsByAddress(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ledger(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    metadata(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pay(
      receiptId: PromiseOrValue<BigNumberish>,
      permit: Splitz.PermitStruct,
      signature: Splitz.SignatureStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    tokenPermit(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addReceipt(
      description: PromiseOrValue<string>,
      lines: Registry.CreateReceiptLineStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getReceipt(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReceiptsByAddress(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ledger(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    metadata(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pay(
      receiptId: PromiseOrValue<BigNumberish>,
      permit: Splitz.PermitStruct,
      signature: Splitz.SignatureStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenPermit(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
