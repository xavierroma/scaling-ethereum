/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { Splitz, SplitzInterface } from "../Splitz";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_token",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "description",
        type: "string",
      },
      {
        components: [
          {
            internalType: "address",
            name: "owes",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
        ],
        internalType: "struct Registry.CreateReceiptLine[]",
        name: "lines",
        type: "tuple[]",
      },
    ],
    name: "addReceipt",
    outputs: [
      {
        internalType: "uint56",
        name: "",
        type: "uint56",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint56",
        name: "id",
        type: "uint56",
      },
    ],
    name: "getReceipt",
    outputs: [
      {
        components: [
          {
            internalType: "uint56",
            name: "id",
            type: "uint56",
          },
          {
            internalType: "address",
            name: "owed",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "timestamp",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            components: [
              {
                internalType: "address",
                name: "owes",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
            ],
            internalType: "struct Registry.ReceiptLine[]",
            name: "lines",
            type: "tuple[]",
          },
          {
            internalType: "string",
            name: "description",
            type: "string",
          },
        ],
        internalType: "struct Registry.Receipt",
        name: "receipt",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    name: "getReceiptsByAddress",
    outputs: [
      {
        components: [
          {
            internalType: "uint56",
            name: "id",
            type: "uint56",
          },
          {
            internalType: "address",
            name: "owed",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "timestamp",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            components: [
              {
                internalType: "address",
                name: "owes",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
            ],
            internalType: "struct Registry.ReceiptLine[]",
            name: "lines",
            type: "tuple[]",
          },
          {
            internalType: "string",
            name: "description",
            type: "string",
          },
        ],
        internalType: "struct Registry.Receipt[]",
        name: "receipts",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "ledger",
    outputs: [
      {
        internalType: "uint56",
        name: "id",
        type: "uint56",
      },
      {
        internalType: "uint8",
        name: "operation",
        type: "uint8",
      },
      {
        internalType: "address",
        name: "owed",
        type: "address",
      },
      {
        internalType: "address",
        name: "owes",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint56",
        name: "",
        type: "uint56",
      },
    ],
    name: "metadata",
    outputs: [
      {
        internalType: "uint56",
        name: "id",
        type: "uint56",
      },
      {
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "ledgerStartPosition",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "description",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint56",
        name: "receiptId",
        type: "uint56",
      },
      {
        components: [
          {
            internalType: "address",
            name: "owner",
            type: "address",
          },
          {
            internalType: "address",
            name: "spender",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "deadline",
            type: "uint256",
          },
        ],
        internalType: "struct Splitz.Permit",
        name: "permit",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "uint8",
            name: "v",
            type: "uint8",
          },
          {
            internalType: "bytes32",
            name: "r",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "s",
            type: "bytes32",
          },
        ],
        internalType: "struct Splitz.Signature",
        name: "signature",
        type: "tuple",
      },
    ],
    name: "pay",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "token",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "tokenPermit",
    outputs: [
      {
        internalType: "contract IERC20Permit",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040526002805466ffffffffffffff1916905534801561002057600080fd5b506040516114f53803806114f583398101604081905261003f91610083565b60028054600160381b600160d81b0319166701000000000000006001600160a01b0393909316928302179055600380546001600160a01b03191690911790556100b3565b60006020828403121561009557600080fd5b81516001600160a01b03811681146100ac57600080fd5b9392505050565b611433806100c26000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063ac1c62141161005b578063ac1c621414610153578063cc937a6714610168578063d068ce8a14610188578063fc0c546a146101b357600080fd5b80630a8b2a001461008d57806310a7fd7b146100bd57806319e2883e14610110578063788e280514610133575b600080fd5b6100a061009b366004610e92565b6101cd565b60405166ffffffffffffff90911681526020015b60405180910390f35b6100d06100cb366004610f4f565b610473565b6040805166ffffffffffffff909616865260ff90941660208601526001600160a01b0392831693850193909352166060830152608082015260a0016100b4565b61012361011e366004610f84565b6104cf565b6040516100b49493929190610fec565b610146610141366004611024565b61058c565b6040516100b491906110fd565b61016661016136600461115f565b6107d2565b005b61017b610176366004610f84565b6109d7565b6040516100b491906111e8565b60035461019b906001600160a01b031681565b6040516001600160a01b0390911681526020016100b4565b60025461019b90600160381b90046001600160a01b031681565b6000816102155760405162461bcd60e51b8152602060048201526011602482015270139bc81b1a5b995cc81c1c9bdd9a591959607a1b60448201526064015b60405180910390fd5b60008451116102665760405162461bcd60e51b815260206004820152601760248201527f4e6f206465736372697074696f6e2070726f7669646564000000000000000000604482015260640161020c565b60015460005b838110156103b0576040805160a08101825260025466ffffffffffffff168152600060208201523391810191909152600190606081018787858181106102b4576102b46111fb565b6102ca9260206040909202019081019150611024565b6001600160a01b031681526020018787858181106102ea576102ea6111fb565b6040908102929092016020908101359093525083546001808201865560009586529483902084516003909202018054938501519285015166ffffffffffffff90921667ffffffffffffffff1990941693909317600160381b60ff909316929092029190911768010000000000000000600160e01b031916600160401b6001600160a01b0392831602178255606083015193820180546001600160a01b031916949091169390931790925560800151600290910155806103a881611227565b91505061026c565b50604080516080810182526002805466ffffffffffffff908116808452426020808601918252858701888152606087018d8152600094855291849052969092208551815466ffffffffffffff191694169390931783555160018301559351918101919091559151909190600382019061042990826112c9565b50506002805466ffffffffffffff169150600061044583611389565b91906101000a81548166ffffffffffffff021916908366ffffffffffffff1602179055509150509392505050565b6001818154811061048357600080fd5b600091825260209091206003909102018054600182015460029092015466ffffffffffffff8216935060ff600160381b830416926001600160a01b03600160401b909304831692169085565b600060208190529081526040902080546001820154600283015460038401805466ffffffffffffff90941694929391929161050990611240565b80601f016020809104026020016040519081016040528092919081815260200182805461053590611240565b80156105825780601f1061055757610100808354040283529160200191610582565b820191906000526020600020905b81548152906001019060200180831161056557829003601f168201915b5050505050905084565b60606000805b60025466ffffffffffffff168110156106655760006105b0826109d7565b9050846001600160a01b031681602001516001600160a01b0316036105e257826105d981611227565b93505050610653565b60005b81608001515181101561065057856001600160a01b031682608001518281518110610612576106126111fb565b6020026020010151600001516001600160a01b03160361063e578361063681611227565b945050610650565b8061064881611227565b9150506105e5565b50505b8061065d81611227565b915050610592565b508067ffffffffffffffff81111561067f5761067f610dd6565b6040519080825280602002602001820160405280156106b857816020015b6106a5610d8e565b81526020019060019003908161069d5790505b5091506000805b60025466ffffffffffffff168110156107ca5760006106dd826109d7565b9050856001600160a01b031681602001516001600160a01b03160361072b5780858461070881611227565b95508151811061071a5761071a6111fb565b6020026020010181905250506107b8565b60005b8160800151518110156107b557866001600160a01b03168260800151828151811061075b5761075b6111fb565b6020026020010151600001516001600160a01b0316036107a35781868561078181611227565b965081518110610793576107936111fb565b60200260200101819052506107b5565b806107ad81611227565b91505061072e565b50505b806107c281611227565b9150506106bf565b505050919050565b60006107dd846109d7565b6020810151909150600090815b8360800151518110156108615760008460800151828151811061080f5761080f6111fb565b60200260200101519050336001600160a01b031681600001516001600160a01b03161461083c575061084f565b602081015161084b90856113af565b9350505b8061085981611227565b9150506107ea565b50600082116108b25760405162461bcd60e51b815260206004820152601860248201527f53706c69747a3a206e6f20616d6f756e7420746f207061790000000000000000604482015260640161020c565b60035484516020860151604080880151905163d505accf60e01b81523360048201523060248201526044810187905260808a0135606482015260ff909316608484015260a483019190915260c48201526001600160a01b039091169063d505accf9060e401600060405180830381600087803b15801561093157600080fd5b505af1158015610945573d6000803e3d6000fd5b50506002546040516323b872dd60e01b81523360048201526001600160a01b03858116602483015260448201879052600160381b90920490911692506323b872dd91506064016020604051808303816000875af11580156109aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ce91906113c8565b50505050505050565b6109df610d8e565b60025466ffffffffffffff90811690831610610a2f5760405162461bcd60e51b815260206004820152600f60248201526e1a59081a5cc81b9bdd081d985b1a59608a1b604482015260640161020c565b66ffffffffffffff808316600090815260208181526040808320815160808101835281549095168552600181015492850192909252600282015490840152600381018054929392606084019190610a8590611240565b80601f0160208091040260200160405190810160405280929190818152602001828054610ab190611240565b8015610afe5780601f10610ad357610100808354040283529160200191610afe565b820191906000526020600020905b815481529060010190602001808311610ae157829003601f168201915b5050505050815250509050600080826040015190505b600154811015610b7a578466ffffffffffffff1660018281548110610b3b57610b3b6111fb565b600091825260209091206003909102015466ffffffffffffff1603610b685781610b6481611227565b9250505b80610b7281611227565b915050610b14565b506040518060c00160405280836000015166ffffffffffffff1681526020016001846040015181548110610bb057610bb06111fb565b600091825260208083206003909202909101546001600160a01b03600160401b909104168352858101519083015260408201526060018267ffffffffffffffff811115610bff57610bff610dd6565b604051908082528060200260200182016040528015610c4457816020015b6040805180820190915260008082526020820152815260200190600190039081610c1d5790505b508152606084015160209091015260408301519093505b6001548110156107ca578466ffffffffffffff1660018281548110610c8257610c826111fb565b600091825260209091206003909102015466ffffffffffffff16036107ca576000836040015182610cb391906113ea565b9050604051806040016040528060018481548110610cd357610cd36111fb565b600091825260209182902060016003909202018101546001600160a01b031683528054929091019185908110610d0b57610d0b6111fb565b90600052602060002090600302016002015481525085608001518281518110610d3657610d366111fb565b602002602001018190525060018281548110610d5457610d546111fb565b90600052602060002090600302016002015485606001818151610d7791906113af565b905250819050610d8681611227565b915050610c5b565b6040518060c00160405280600066ffffffffffffff16815260200160006001600160a01b03168152602001600081526020016000815260200160608152602001606081525090565b634e487b7160e01b600052604160045260246000fd5b6040516060810167ffffffffffffffff81118282101715610e0f57610e0f610dd6565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715610e3e57610e3e610dd6565b604052919050565b60008083601f840112610e5857600080fd5b50813567ffffffffffffffff811115610e7057600080fd5b6020830191508360208260061b8501011115610e8b57600080fd5b9250929050565b600080600060408486031215610ea757600080fd5b833567ffffffffffffffff80821115610ebf57600080fd5b818601915086601f830112610ed357600080fd5b8135602082821115610ee757610ee7610dd6565b610ef9601f8301601f19168201610e15565b8281528982848701011115610f0d57600080fd5b82828601838301376000928101820192909252909550860135915080821115610f3557600080fd5b50610f4286828701610e46565b9497909650939450505050565b600060208284031215610f6157600080fd5b5035919050565b803566ffffffffffffff81168114610f7f57600080fd5b919050565b600060208284031215610f9657600080fd5b610f9f82610f68565b9392505050565b6000815180845260005b81811015610fcc57602081850181015186830182015201610fb0565b506000602082860101526020601f19601f83011685010191505092915050565b66ffffffffffffff8516815283602082015282604082015260806060820152600061101a6080830184610fa6565b9695505050505050565b60006020828403121561103657600080fd5b81356001600160a01b0381168114610f9f57600080fd5b805166ffffffffffffff1682526020808201516001600160a01b0390811682850152604080840151818601526060808501519086015260808085015160c0918701829052805191870182905260009490810193909291859060e08901905b808310156110d6578651805185168352860151868301529585019560019290920191908401906110ab565b5060a0880151955088810360a08a01526110f08187610fa6565b9998505050505050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561115257603f1988860301845261114085835161104d565b94509285019290850190600101611124565b5092979650505050505050565b600080600083850361012081121561117657600080fd5b61117f85610f68565b935060a0601f198201121561119357600080fd5b602085019250606060bf19820112156111ab57600080fd5b506111b4610dec565b60c085013560ff811681146111c857600080fd5b815260e08501356020820152610100909401356040850152509093909250565b602081526000610f9f602083018461104d565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001820161123957611239611211565b5060010190565b600181811c9082168061125457607f821691505b60208210810361127457634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156112c457600081815260208120601f850160051c810160208610156112a15750805b601f850160051c820191505b818110156112c0578281556001016112ad565b5050505b505050565b815167ffffffffffffffff8111156112e3576112e3610dd6565b6112f7816112f18454611240565b8461127a565b602080601f83116001811461132c57600084156113145750858301515b600019600386901b1c1916600185901b1785556112c0565b600085815260208120601f198616915b8281101561135b5788860151825594840194600190910190840161133c565b50858210156113795787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600066ffffffffffffff8083168181036113a5576113a5611211565b6001019392505050565b808201808211156113c2576113c2611211565b92915050565b6000602082840312156113da57600080fd5b81518015158114610f9f57600080fd5b818103818111156113c2576113c261121156fea26469706673582212202e1edbea2ead1561e97e1715a52461a9726e5a59968e268e4c52e167218ea07d64736f6c63430008130033";

type SplitzConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SplitzConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Splitz__factory extends ContractFactory {
  constructor(...args: SplitzConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Splitz> {
    return super.deploy(_token, overrides || {}) as Promise<Splitz>;
  }
  override getDeployTransaction(
    _token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_token, overrides || {});
  }
  override attach(address: string): Splitz {
    return super.attach(address) as Splitz;
  }
  override connect(signer: Signer): Splitz__factory {
    return super.connect(signer) as Splitz__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SplitzInterface {
    return new utils.Interface(_abi) as SplitzInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Splitz {
    return new Contract(address, _abi, signerOrProvider) as Splitz;
  }
}
